name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      run: |
        npm run lint
        npm run test:ci
        npm test -- tests/integration
        npm test -- tests/performance
        
    - name: Build production
      run: npm run build
      
    - name: Validate production build
      run: |
        # Check required files exist
        test -f build/index.html
        test -d build/static
        
        # Check bundle size constraints
        MAIN_JS_SIZE=$(find build/static/js -name "main.*.js" -exec stat -c%s {} \;)
        if [ $MAIN_JS_SIZE -gt 2097152 ]; then # 2MB
          echo "Main bundle too large: $MAIN_JS_SIZE bytes"
          exit 1
        fi
        
    - name: Archive release build
      uses: actions/upload-artifact@v4
      with:
        name: release-build
        path: build/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-build
        path: build/
        
    - name: Create release archive
      run: |
        cd build
        tar -czf ../poker-trainer-${{ steps.get_version.outputs.VERSION }}.tar.gz .
        cd ..
        zip -r poker-trainer-${{ steps.get_version.outputs.VERSION }}.zip build/
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        VERSION=${{ steps.get_version.outputs.VERSION }}
        if [ -f CHANGELOG.md ]; then
          # Extract section for this version
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release-notes.md
        else
          echo "Release $VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "See commit history for changes." >> release-notes.md
        fi
        
    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PRERELEASE=""
        if [[ "${{ steps.get_version.outputs.VERSION }}" =~ (alpha|beta|rc) ]]; then
          PRERELEASE="--prerelease"
        fi
        
        gh release create "${{ steps.get_version.outputs.VERSION }}" \
          --title "PokerTrainer ${{ steps.get_version.outputs.VERSION }}" \
          --notes-file release-notes.md \
          $PRERELEASE \
          "./poker-trainer-${{ steps.get_version.outputs.VERSION }}.tar.gz#Tarball" \
          "./poker-trainer-${{ steps.get_version.outputs.VERSION }}.zip#Zip Archive"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-build
        path: build/
        
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        echo "Build artifacts ready in ./build/"
        echo "Integration with hosting provider would go here"
        
        # Example: Deploy to Netlify, Vercel, AWS S3, etc.
        # netlify deploy --prod --dir=build
        # vercel --prod build/
        # aws s3 sync build/ s3://your-bucket --delete
        
    - name: Notify deployment
      run: |
        echo "Production deployment completed"
        echo "Version: ${{ steps.get_version.outputs.VERSION }}"
        echo "Build time: $(date)"

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Update documentation
      run: |
        echo "Updating documentation for release"
        # Update version in documentation files
        # Generate API documentation
        # Update README with new features
        
    - name: Notify team
      run: |
        echo "Release completed successfully"
        echo "All systems operational"
        
    - name: Create next development branch
      run: |
        # Prepare for next development cycle
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Create development branch for next version
        CURRENT_VERSION=${{ steps.get_version.outputs.VERSION }}
        NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        
        git checkout -b development/v$NEXT_VERSION || echo "Branch already exists"
        git push origin development/v$NEXT_VERSION || echo "Branch already pushed"