name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Build for production
      run: npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: true
        REACT_APP_VERSION: ${{ github.sha }}
        REACT_APP_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
        
    - name: Create deployment package
      run: |
        tar -czf deploy-package.tar.gz build/
        echo "PACKAGE_SIZE=$(du -h deploy-package.tar.gz | cut -f1)" >> $GITHUB_ENV
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deploy-package
        path: deploy-package.tar.gz
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.pokertrainer.app
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deploy-package
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Examples:
        # - Deploy to Vercel: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        # - Deploy to Netlify: netlify deploy --prod --auth=${{ secrets.NETLIFY_TOKEN }}
        # - Deploy to AWS S3: aws s3 sync build/ s3://staging-bucket --delete
        
    - name: Run smoke tests
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Run basic smoke tests
        curl -f https://staging.pokertrainer.app || exit 1
        echo "Staging deployment successful"

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://pokertrainer.app
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deploy-package
        
    - name: Extract package
      run: tar -xzf deploy-package.tar.gz
      
    - name: Pre-deployment validation
      run: |
        # Validate build integrity
        test -f build/index.html || exit 1
        test -d build/static || exit 1
        
        # Check for required environment variables
        echo "Validating production deployment..."
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This should include:
        # - Blue-green deployment strategy
        # - Database migrations if needed
        # - Cache invalidation
        # - CDN updates
        
    - name: Post-deployment validation
      run: |
        # Wait for deployment to propagate
        sleep 60
        
        # Run production smoke tests
        curl -f https://pokertrainer.app || exit 1
        
        # Check critical endpoints
        curl -f https://pokertrainer.app/api/health || exit 1
        
        echo "Production deployment successful"
        
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false,
            required_contexts: [],
            production_environment: true
          });

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Determine failed environment
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          echo "FAILED_ENV=staging" >> $GITHUB_ENV
        else
          echo "FAILED_ENV=production" >> $GITHUB_ENV
        fi
        
    - name: Initiate rollback
      run: |
        echo "Initiating rollback for ${{ env.FAILED_ENV }} environment"
        # Add rollback commands here
        # This might include:
        # - Reverting to previous deployment
        # - Restoring database backups
        # - Clearing caches
        # - Notifying team
        
    - name: Notify team
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment failed: ${process.env.FAILED_ENV}`,
            body: `Automatic rollback initiated for ${process.env.FAILED_ENV} environment.\n\nCommit: ${context.sha}\nTriggered by: ${context.actor}`,
            labels: ['deployment-failure', 'urgent']
          });