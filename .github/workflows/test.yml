name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
        react-version: [18, 19]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install React ${{ matrix.react-version }}
      if: matrix.react-version != 19
      run: |
        npm install react@^${{ matrix.react-version }} react-dom@^${{ matrix.react-version }}
        
    - name: Run unit tests
      run: npm run test:ci -- --testPathIgnorePatterns=integration --testPathIgnorePatterns=e2e
      
    - name: Generate coverage report
      if: matrix.node-version == '20.x' && matrix.react-version == 19
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Node: ${{ matrix.node-version }}, React: ${{ matrix.react-version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        npx coverage-summary >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x' && matrix.react-version == 19
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: unit-tests
        name: unit-coverage
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node${{ matrix.node-version }}-react${{ matrix.react-version }}
        path: |
          coverage/
          junit.xml
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration -- --json --outputFile=integration-results.json
      
    - name: Process test results
      if: always()
      run: |
        echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat integration-results.json | jq '.testResults[] | {name: .name, status: .status, duration: .duration}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: integration-results.json
        retention-days: 7

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run component tests
      run: |
        npm test -- --testPathPattern="components" --coverage --coverageDirectory=component-coverage
        
    - name: Upload component coverage
      uses: codecov/codecov-action@v5
      with:
        files: ./component-coverage/lcov.info
        flags: component-tests
        name: component-coverage

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, component-tests]
    if: always()
    permissions:
      checks: write
      pull-requests: write
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v5
      with:
        pattern: '*-results*'
        
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/junit.xml
          **/*-results.json
        check_name: Test Results
        comment_mode: always
        
    - name: Create test summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = core.summary
            .addHeading('Test Results Summary', 2)
            .addTable([
              [{data: 'Test Suite', header: true}, {data: 'Status', header: true}],
              ['Unit Tests', '✅ Passed'],
              ['Integration Tests', '✅ Passed'],
              ['Component Tests', '✅ Passed']
            ])
            .addLink('View detailed results', `${context.payload.pull_request.html_url}/checks`)
            .stringify();
          
          await core.summary.write();