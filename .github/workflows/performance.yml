name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        CI: true
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: ./.lighthouserc.js
        
    - name: Generate Lighthouse report
      run: |
        echo "## Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "View the full report in the artifacts" >> $GITHUB_STEP_SUMMARY

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and analyze bundle
      run: |
        npm run build -- --profile
        npx webpack-bundle-analyzer build/static/js/*.js --mode static --report bundle-report.html --no-open
        
    - name: Check bundle size limits
      run: |
        # Define size limits (in bytes)
        MAX_JS_SIZE=500000  # 500KB
        MAX_CSS_SIZE=100000 # 100KB
        
        # Check JS bundle size
        JS_SIZE=$(find build/static/js -name "*.js" -not -name "*.map" -exec stat -f%z {} + | awk '{s+=$1} END {print s}')
        echo "Total JS size: $JS_SIZE bytes"
        
        if [ "$JS_SIZE" -gt "$MAX_JS_SIZE" ]; then
          echo "::warning::JS bundle size ($JS_SIZE) exceeds limit ($MAX_JS_SIZE)"
        fi
        
        # Check CSS bundle size
        CSS_SIZE=$(find build/static/css -name "*.css" -not -name "*.map" -exec stat -f%z {} + | awk '{s+=$1} END {print s}' || echo 0)
        echo "Total CSS size: $CSS_SIZE bytes"
        
        if [ "$CSS_SIZE" -gt "$MAX_CSS_SIZE" ]; then
          echo "::warning::CSS bundle size ($CSS_SIZE) exceeds limit ($MAX_CSS_SIZE)"
        fi
        
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: bundle-report.html
        retention-days: 30

  runtime-performance:
    name: Runtime Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        # Run custom performance tests
        npm run test:performance -- --json --outputFile=performance-results.json
        
    - name: Analyze performance results
      run: |
        echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat performance-results.json | jq '.results[] | {test: .name, duration: .duration, memory: .memory}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json
        retention-days: 30

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run memory leak detection
      run: |
        # Run tests with memory leak detection
        npm test -- --detectLeaks --runInBand --logHeapUsage > memory-report.txt 2>&1 || true
        
    - name: Upload memory report
      uses: actions/upload-artifact@v4
      with:
        name: memory-report
        path: memory-report.txt
        retention-days: 30